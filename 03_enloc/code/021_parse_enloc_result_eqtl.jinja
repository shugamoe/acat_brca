#!/bin/bash
#SBATCH --job-name={{job_name}}
#SBATCH --time={{job_walltime}}
#SBATCH --mem={{job_memory}}
#SBATCH --nodes=1
#SBATCH --tasks-per-node=1
#SBATCH --cpus-per-task=1
#SBATCH --output={{logs_folder}}/{% raw %}%x.o%j.log{% endraw %}

# gardner
# module load gcc/6.2.0
# module load python/3.5.3

# randi
module load gcc/12.1.0
module load miniconda3/23.1.0
source activate /gpfs/data/gao-lab/Julian/software/envs/metaxcan
export PATH=/gpfs/data/gao-lab/Julian/software/envs/metaxcan/bin:$PATH


{% raw %}cd $SLURM_SUBMIT_DIR {% endraw %}

python3 -c '
import sys
import os
import gzip

I = sys.argv[1]
O = sys.argv[2]
K = sys.argv[3]

print("Loading key")
key={}
with gzip.open(K) as f:
  f.readline()
  for l in f:
    comps = l.decode().strip().split()
    key[comps[0]] = comps[1]

print("Processing file")
with open(I) as _i:
  with gzip.open(O, "w") as _o:
    _o.write("gwas_locus\tmolecular_qtl_trait\tlocus_gwas_pip\tlocus_rcp\tlead_coloc_SNP\tlead_snp_rcp\n".encode())
    for l in _i:
        comps = l.strip().split()
        if len(comps) == 5 and len(comps[4]) > 1 and comps[4][0:2] == "-1":
            comps.insert(4,"NA")
        comps[1] = key[comps[1]]
        _l = "{}\n".format("\t".join(comps))
        _o.write(_l.encode())
print("Done")
' {{ input }} \
{{ output }} \
{{ key }}
